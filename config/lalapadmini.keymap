#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mkp_input_listener { input-processors = <&zip_temp_layer 1 380>; };

#define DEFAULT_LAYER   0

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角
#define JP_DOLLAR       DOLLAR             // $

&mt {
    quick-tap-ms = <300>;
    flavor = "balanced";
};

&lt {
    quick-tap-ms = <300>;
    flavor = "balanced";
};

// Mouse Scroll Value

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

// cirque trackpad input&layer control

&glidepoint_listener_L {
    input-processors =
        <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
        <&zip_xy_scaler 3 2>,
        <&zip_temp_layer 1 350>;

    lowspeedmode {
        layers = <8>;
        input-processors =
            <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_xy_scaler 1 2>,
            <&zip_temp_layer 1 300>;
    };

    scroller {
        layers = <7>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            <&zip_scroll_scaler 1 35>;
    };

    /omit-if-no-ref/

    zip_temp_layer: zip_temp_layer {
        compatible = "zmk,input-processor-temp-layer";
        #input-processor-cells = <2>;
        require-prior-idle-ms = <400>;
        excluded-positions = <
            15 //
            16 //
        >;
    };
};

/ {
    behaviors {
        mt2: mod_tap2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        tap_dance_layer_1and2: tap_dance_layer_1and2 {
            compatible = "zmk,behavior-tap-dance";
            label = "td_mo12";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&mo 2>;
        };
    };

    combos {
        compatible = "zmk,combos";

        COMBO_TAB {
            bindings = <&kp TAB>;
            key-positions = <7 8>;
        };

        COMBO_WIN {
            bindings = <&kp LWIN>;
            key-positions = <15 16>;
        };
    };

    macros {
        MACRO_LTAP: MACRO_LTAP {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK>;
            label = "MACRO_LTAP";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT_LAYER {
            display-name = "Default";
            bindings = <
&kp W            &kp S             &kp U  &kp R        &kp T
&lt 7 E          &kp I             &kp A  &kp O        &kp K
&kp Y            &mt LEFT_SHIFT H  &kp M  &kp N        &lt 4 SPACE
&lt 7 LS(SLASH)  &lt 8 MINUS              &lt 2 ENTER  &lt 3 BACKSPACE
            >;
        };

        layer_1 {
            bindings = <
&trans    &trans    &trans  &trans  &trans
&trans    &trans    &trans  &trans  &trans
&trans    &trans    &trans  &trans  &trans
&mkp MB2  &mkp MB1          &trans  &trans
            >;
        };

        layer_2 {
            bindings = <
&kp P             &kp Q             &kp COMMA  &kp F   &kp JP_AT
&kp PERIOD        &kp L             &kp D      &kp J   &kp G
&kp Z             &kp X             &kp C      &kp V   &kp B
&kp LS(NUMBER_1)  &kp LEFT_CONTROL             &trans  &mt LEFT_SHIFT DEL
            >;
        };

        layer_3 {
            bindings = <
&kp MINUS    &kp N7        &kp N8        &kp N9        &kp JP_EQUAL
&kp JP_PLUS  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp SLASH
&kp N0       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp JP_ASTERISK
&kp N0       &kp PERIOD                  &trans        &trans
            >;
        };

        layer_4 {
            bindings = <
&kp LEFT_SHIFT  &kp F7  &kp F8  &kp F9   &kp F12
&kp LEFT_ALT    &kp F4  &kp F5  &kp F6   &kp F11
&kp RCTRL       &kp F1  &kp F2  &kp F3   &trans
&trans          &trans          &kp F10  &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans  &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans  &trans
            >;
        };

        layer_7 {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans        &trans        &kp JP_EISU   &kp JP_KANA   &bt BT_CLR
&trans        &trans        &trans        &trans        &trans
&trans        &trans                      &trans        &trans
            >;
        };

        layer_8 {
            bindings = <
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans  &trans
            >;
        };
    };
};
